describe("angular",function(){var e;afterEach(function(){dealoc(e)});describe("case",function(){it("should change case",function(){expect(lowercase("ABC90")).toEqual("abc90");expect(manualLowercase("ABC90")).toEqual("abc90");expect(uppercase("abc90")).toEqual("ABC90");expect(manualUppercase("abc90")).toEqual("ABC90")})});describe("copy",function(){it("should return same object",function(){var a={},b=[];expect(copy({},a)).toBe(a);expect(copy([],b)).toBe(b)});it("should preserve prototype chaining",
function(){var a={},b=Object.create(a),c=Object.create(b);expect(b.isPrototypeOf(copy(c))).toBe(!0);expect(a.isPrototypeOf(copy(c))).toBe(!0);a=function(){};expect(copy(new a)instanceof a).toBe(!0)});it("should copy Date",function(){var a=new Date(123);expect(copy(a)instanceof Date).toBeTruthy();expect(copy(a).getTime()).toEqual(123);expect(copy(a)===a).toBeFalsy()});it("should copy RegExp",function(){var a=/.*/;expect(copy(a)instanceof RegExp).toBeTruthy();expect(copy(a).source).toBe(".*");expect(copy(a)===
a).toBe(!1)});it("should copy literal RegExp",function(){var a=/.*/;expect(copy(a)instanceof RegExp).toBeTruthy();expect(copy(a).source).toEqual(".*");expect(copy(a)===a).toBeFalsy()});it("should copy RegExp with flags",function(){var a=RegExp(".*","gim");expect(copy(a).global).toBe(!0);expect(copy(a).ignoreCase).toBe(!0);expect(copy(a).multiline).toBe(!0)});it("should copy RegExp with lastIndex",function(){var a=/a+b+/g;expect(a.exec("ab aabb")[0]).toEqual("ab");expect(copy(a).exec("ab aabb")[0]).toEqual("aabb")});
it("should deeply copy literal RegExp",function(){var a={re:/.*/};expect(copy(a).re instanceof RegExp).toBeTruthy();expect(copy(a).re.source).toEqual(".*");expect(copy(a.re)===a.re).toBeFalsy()});it("should copy a Uint8Array with no destination",function(){if("undefined"!==typeof Uint8Array){var a=new Uint8Array(2);a[1]=1;var b=copy(a);expect(copy(a)instanceof Uint8Array).toBeTruthy();expect(b).toEqual(a);expect(b).not.toBe(a)}});it("should copy a Uint8ClampedArray with no destination",function(){if("undefined"!==
typeof Uint8ClampedArray){var a=new Uint8ClampedArray(2);a[1]=1;var b=copy(a);expect(copy(a)instanceof Uint8ClampedArray).toBeTruthy();expect(b).toEqual(a);expect(b).not.toBe(a)}});it("should copy a Uint16Array with no destination",function(){if("undefined"!==typeof Uint16Array){var a=new Uint16Array(2);a[1]=1;var b=copy(a);expect(copy(a)instanceof Uint16Array).toBeTruthy();expect(b).toEqual(a);expect(b).not.toBe(a)}});it("should copy a Uint32Array with no destination",function(){if("undefined"!==
typeof Uint32Array){var a=new Uint32Array(2);a[1]=1;var b=copy(a);expect(copy(a)instanceof Uint32Array).toBeTruthy();expect(b).toEqual(a);expect(b).not.toBe(a)}});it("should copy a Int8Array with no destination",function(){if("undefined"!==typeof Int8Array){var a=new Int8Array(2);a[1]=1;var b=copy(a);expect(copy(a)instanceof Int8Array).toBeTruthy();expect(b).toEqual(a);expect(b).not.toBe(a)}});it("should copy a Int16Array with no destination",function(){if("undefined"!==typeof Int16Array){var a=new Int16Array(2);
a[1]=1;var b=copy(a);expect(copy(a)instanceof Int16Array).toBeTruthy();expect(b).toEqual(a);expect(b).not.toBe(a)}});it("should copy a Int32Array with no destination",function(){if("undefined"!==typeof Int32Array){var a=new Int32Array(2);a[1]=1;var b=copy(a);expect(copy(a)instanceof Int32Array).toBeTruthy();expect(b).toEqual(a);expect(b).not.toBe(a)}});it("should copy a Float32Array with no destination",function(){if("undefined"!==typeof Float32Array){var a=new Float32Array(2);a[1]=1;var b=copy(a);
expect(copy(a)instanceof Float32Array).toBeTruthy();expect(b).toEqual(a);expect(b).not.toBe(a)}});it("should copy a Float64Array with no destination",function(){if("undefined"!==typeof Float64Array){var a=new Float64Array(2);a[1]=1;var b=copy(a);expect(copy(a)instanceof Float64Array).toBeTruthy();expect(b).toEqual(a);expect(b).not.toBe(a)}});it("should throw an exception if a Uint8Array is the destination",function(){if("undefined"!==typeof Uint8Array){var a=new Uint8Array,b=new Uint8Array(5);expect(function(){copy(a,
b)}).toThrowMinErr("ng","cpta","Can't copy! TypedArray destination cannot be mutated.")}});it("should throw an exception if a Uint8ClampedArray is the destination",function(){if("undefined"!==typeof Uint8ClampedArray){var a=new Uint8ClampedArray,b=new Uint8ClampedArray(5);expect(function(){copy(a,b)}).toThrowMinErr("ng","cpta","Can't copy! TypedArray destination cannot be mutated.")}});it("should throw an exception if a Uint16Array is the destination",function(){if("undefined"!==typeof Uint16Array){var a=
new Uint16Array,b=new Uint16Array(5);expect(function(){copy(a,b)}).toThrowMinErr("ng","cpta","Can't copy! TypedArray destination cannot be mutated.")}});it("should throw an exception if a Uint32Array is the destination",function(){if("undefined"!==typeof Uint32Array){var a=new Uint32Array,b=new Uint32Array(5);expect(function(){copy(a,b)}).toThrowMinErr("ng","cpta","Can't copy! TypedArray destination cannot be mutated.")}});it("should throw an exception if a Int8Array is the destination",function(){if("undefined"!==
typeof Int8Array){var a=new Int8Array,b=new Int8Array(5);expect(function(){copy(a,b)}).toThrowMinErr("ng","cpta","Can't copy! TypedArray destination cannot be mutated.")}});it("should throw an exception if a Int16Array is the destination",function(){if("undefined"!==typeof Int16Array){var a=new Int16Array,b=new Int16Array(5);expect(function(){copy(a,b)}).toThrowMinErr("ng","cpta","Can't copy! TypedArray destination cannot be mutated.")}});it("should throw an exception if a Int32Array is the destination",
function(){if("undefined"!==typeof Int32Array){var a=new Int32Array,b=new Int32Array(5);expect(function(){copy(a,b)}).toThrowMinErr("ng","cpta","Can't copy! TypedArray destination cannot be mutated.")}});it("should throw an exception if a Float32Array is the destination",function(){if("undefined"!==typeof Float32Array){var a=new Float32Array,b=new Float32Array(5);expect(function(){copy(a,b)}).toThrowMinErr("ng","cpta","Can't copy! TypedArray destination cannot be mutated.")}});it("should throw an exception if a Float64Array is the destination",
function(){if("undefined"!==typeof Float64Array){var a=new Float64Array,b=new Float64Array(5);expect(function(){copy(a,b)}).toThrowMinErr("ng","cpta","Can't copy! TypedArray destination cannot be mutated.")}});it("should deeply copy an array into an existing array",function(){var a=[1,{name:"value"}],b=[{key:"v"}];expect(copy(a,b)).toBe(b);expect(b).toEqual([1,{name:"value"}]);expect(b[1]).toEqual({name:"value"});expect(b[1]).not.toBe(a[1])});it("should deeply copy an array into a new array",function(){var a=
[1,{name:"value"}],b=copy(a);expect(a).toEqual([1,{name:"value"}]);expect(b).toEqual(a);expect(b).not.toBe(a);expect(b[1]).not.toBe(a[1])});it("should copy empty array",function(){var a=[{key:"v"}];expect(copy([],a)).toEqual([]);expect(a).toEqual([])});it("should deeply copy an object into an existing object",function(){var a={a:{name:"value"}},b={b:{key:"v"}};expect(copy(a,b)).toBe(b);expect(b).toEqual({a:{name:"value"}});expect(b.a).toEqual(a.a);expect(b.a).not.toBe(a.a)});it("should deeply copy an object into a non-existing object",
function(){var a={a:{name:"value"}},b=copy(a,void 0);expect(a).toEqual({a:{name:"value"}});expect(b).toEqual(a);expect(b).not.toBe(a);expect(b.a).toEqual(a.a);expect(b.a).not.toBe(a.a)});it("should copy primitives",function(){expect(copy(null)).toEqual(null);expect(copy("")).toBe("");expect(copy("lala")).toBe("lala");expect(copy(123)).toEqual(123);expect(copy([{key:null}])).toEqual([{key:null}])});it("should throw an exception if a Scope is being copied",inject(function(a){expect(function(){copy(a.$new())}).toThrowMinErr("ng",
"cpws","Can't copy! Making copies of Window or Scope instances is not supported.")}));it("should throw an exception if a Window is being copied",function(){expect(function(){copy(window)}).toThrowMinErr("ng","cpws","Can't copy! Making copies of Window or Scope instances is not supported.")});it("should throw an exception when source and destination are equivalent",function(){var a,b;a=b={key:"value"};expect(function(){copy(a,b)}).toThrowMinErr("ng","cpi","Can't copy! Source and destination are identical.");
a=b=[2,4];expect(function(){copy(a,b)}).toThrowMinErr("ng","cpi","Can't copy! Source and destination are identical.")});it("should not copy the private $$hashKey",function(){var a,b;a={};hashKey(a);b=copy(a);expect(hashKey(b)).not.toEqual(hashKey(a))});it("should retain the previous $$hashKey when copying object with hashKey",function(){var a,b,c;a={};b={};c=hashKey(b);hashKey(a);b=copy(a,b);expect(hashKey(b)).not.toEqual(hashKey(a));expect(hashKey(b)).toEqual(c)});it("should retain the previous $$hashKey when copying non-object",
function(){var a={},b=hashKey(a);copy(null,a);expect(hashKey(a)).toEqual(b);copy(42,a);expect(hashKey(a)).toEqual(b);copy(new Date,a);expect(hashKey(a)).toEqual(b)});it("should handle circular references",function(){var a={b:{a:null},self:null,selfs:[null,null,[null]]};a.b.a=a;a.self=a;a.selfs=[a,a.b,[a]];var b=copy(a,null);expect(b).toEqual(a);expect(b).not.toBe(a);expect(b).toBe(b.self);expect(b).toBe(b.selfs[2][0]);expect(b.selfs[2]).not.toBe(a.selfs[2]);var c=[],b=copy(a,c);expect(b).toBe(c);
expect(b).not.toBe(a);expect(b).toBe(b.self)});it("should handle objects with multiple references",function(){var a={},a=[a,-1,a],b=copy(a);expect(b[0]).not.toBe(a[0]);expect(b[0]).toBe(b[2]);var c=[],b=copy(a,c);expect(b).toBe(c);expect(b[0]).not.toBe(a[0]);expect(b[0]).toBe(b[2])});it("should handle date/regex objects with multiple references",function(){var a=/foo/,b=new Date,a={re:a,re2:a,d:b,d2:b},b=copy(a);expect(b.re).toBe(b.re2);expect(b.d).toBe(b.d2);b=copy(a,{});expect(b.re).toBe(b.re2);
expect(b.d).toBe(b.d2)});it("should clear destination arrays correctly when source is non-array",function(){expect(copy(null,[1,2,3])).toEqual([]);expect(copy(void 0,[1,2,3])).toEqual([]);expect(copy({0:1,1:2},[1,2,3])).toEqual([1,2]);expect(copy(new Date,[1,2,3])).toEqual([]);expect(copy(/a/,[1,2,3])).toEqual([]);expect(copy(!0,[1,2,3])).toEqual([])});it("should clear destination objects correctly when source is non-array",function(){expect(copy(null,{0:1,1:2,2:3})).toEqual({});expect(copy(void 0,
{0:1,1:2,2:3})).toEqual({});expect(copy(new Date,{0:1,1:2,2:3})).toEqual({});expect(copy(/a/,{0:1,1:2,2:3})).toEqual({});expect(copy(!0,{0:1,1:2,2:3})).toEqual({})});it("should copy objects with no prototype parent",function(){var a=extend(Object.create(null),{a:1,b:2,c:3}),a=copy(a);expect(Object.getPrototypeOf(a)).toBe(null);expect(a.a).toBe(1);expect(a.b).toBe(2);expect(a.c).toBe(3);expect(Object.keys(a)).toEqual(["a","b","c"])})});describe("extend",function(){it("should not copy the private $$hashKey",
function(){var a,b;a={};b={};hashKey(a);b=extend(b,a);expect(hashKey(b)).not.toEqual(hashKey(a))});it("should retain the previous $$hashKey",function(){var a,b,c;a={};b={};c=hashKey(b);hashKey(a);b=extend(b,a);expect(hashKey(b)).not.toEqual(hashKey(a));expect(hashKey(b)).toEqual(c)});it("should work when extending with itself",function(){var a,b,c;b=a={};c=hashKey(b);b=extend(b,a);expect(hashKey(b)).toEqual(c)});it("should copy dates by reference",function(){var a={date:new Date},b={};extend(b,a);
expect(b.date).toBe(a.date)})});describe("merge",function(){it("should recursively copy objects into dst from left to right",function(){var a={foo:{bar:"foobar"}};merge(a,{foo:{bazz:"foobazz"}},{foo:{bozz:"foobozz"}});expect(a).toEqual({foo:{bar:"foobar",bazz:"foobazz",bozz:"foobozz"}})});it("should replace primitives with objects",function(){var a={foo:"bloop"};merge(a,{foo:{bar:{baz:"bloop"}}});expect(a).toEqual({foo:{bar:{baz:"bloop"}}})});it("should replace null values in destination with objects",
function(){var a={foo:null};merge(a,{foo:{bar:{baz:"bloop"}}});expect(a).toEqual({foo:{bar:{baz:"bloop"}}})});it("should copy references to functions by value rather than merging",function(){function a(){}var b={foo:1};merge(b,{foo:a});expect(b).toEqual({foo:a})});it("should create a new array if destination property is a non-object and source property is an array",function(){var a={foo:NaN},b={foo:[1,2,3]};merge(a,b);expect(a).toEqual({foo:[1,2,3]});expect(a.foo).not.toBe(b.foo)});it("should copy dates by value",
function(){var a={date:new Date},b={};merge(b,a);expect(b.date).not.toBe(a.date);expect(isDate(b.date)).toBeTruthy();expect(b.date.valueOf()).toEqual(a.date.valueOf())})});describe("shallow copy",function(){it("should make a copy",function(){var a={key:{}},b=shallowCopy(a);expect(b).toEqual(a);expect(b.key).toBe(a.key)});it('should omit "$$"-prefixed properties',function(){var a={};expect(shallowCopy({$$some:!0,$$:!0},a)).toBe(a);expect(a.$$some).toBeUndefined();expect(a.$$).toBeUndefined()});it('should copy "$"-prefixed properties from copy',
function(){var a={$some:!0},b={};expect(shallowCopy(a,b)).toBe(b);expect(b.$some).toBe(a.$some)});it("should handle arrays",function(){var a=[{},1],b=[],c=shallowCopy(a);expect(c).not.toBe(a);expect(c).toEqual(a);expect(c[0]).toBe(a[0]);expect(shallowCopy(a,b)).toBe(b);expect(b).toEqual(a)});it("should handle primitives",function(){expect(shallowCopy("test")).toBe("test");expect(shallowCopy(3)).toBe(3);expect(shallowCopy(!0)).toBe(!0)})});describe("elementHTML",function(){it("should dump element",
function(){expect(startingTag('<div attr="123">something<span></span></div>')).toEqual('<div attr="123">')})});describe("equals",function(){it("should return true if same object",function(){var a={};expect(equals(a,a)).toEqual(!0);expect(equals(a,{})).toEqual(!0);expect(equals(1,"1")).toEqual(!1);expect(equals(1,"2")).toEqual(!1)});it("should recurse into object",function(){expect(equals({},{})).toEqual(!0);expect(equals({name:"misko"},{name:"misko"})).toEqual(!0);expect(equals({name:"misko",age:1},
{name:"misko"})).toEqual(!1);expect(equals({name:"misko"},{name:"misko",age:1})).toEqual(!1);expect(equals({name:"misko"},{name:"adam"})).toEqual(!1);expect(equals(["misko"],["misko"])).toEqual(!0);expect(equals(["misko"],["adam"])).toEqual(!1);expect(equals(["misko"],["misko","adam"])).toEqual(!1)});it("should ignore undefined member variables during comparison",function(){var a={name:"misko"},b={name:"misko",undefinedvar:void 0};expect(equals(a,b)).toBe(!0);expect(equals(b,a)).toBe(!0)});it("should ignore $ member variables",
function(){expect(equals({name:"misko",$id:1},{name:"misko",$id:2})).toEqual(!0);expect(equals({name:"misko"},{name:"misko",$id:2})).toEqual(!0);expect(equals({name:"misko",$id:1},{name:"misko"})).toEqual(!0)});it("should ignore functions",function(){expect(equals({func:function(){}},{bar:function(){}})).toEqual(!0)});it("should work well with nulls",function(){expect(equals(null,"123")).toBe(!1);expect(equals("123",null)).toBe(!1);var a={foo:"bar"};expect(equals(null,a)).toBe(!1);expect(equals(a,
null)).toBe(!1);expect(equals(null,null)).toBe(!0)});it("should work well with undefined",function(){expect(equals(void 0,"123")).toBe(!1);expect(equals("123",void 0)).toBe(!1);var a={foo:"bar"};expect(equals(void 0,a)).toBe(!1);expect(equals(a,void 0)).toBe(!1);expect(equals(void 0,void 0)).toBe(!0)});it("should treat two NaNs as equal",function(){expect(equals(NaN,NaN)).toBe(!0)});it("should compare Scope instances only by identity",inject(function(a){var b=a.$new(),c=a.$new();expect(equals(b,b)).toBe(!0);
expect(equals(b,c)).toBe(!1);expect(equals(a,b)).toBe(!1);expect(equals(void 0,b)).toBe(!1)}));it("should compare Window instances only by identity",function(){expect(equals(window,window)).toBe(!0);expect(equals(window,window.parent)).toBe(!1);expect(equals(window,void 0)).toBe(!1)});it("should compare dates",function(){expect(equals(new Date(0),new Date(0))).toBe(!0);expect(equals(new Date(0),new Date(1))).toBe(!1);expect(equals(new Date(0),0)).toBe(!1);expect(equals(0,new Date(0))).toBe(!1);expect(equals(new Date(void 0),
new Date(void 0))).toBe(!0);expect(equals(new Date(void 0),new Date(0))).toBe(!1);expect(equals(new Date(void 0),new Date(null))).toBe(!1);expect(equals(new Date(void 0),new Date("wrong"))).toBe(!0);expect(equals(new Date,/abc/)).toBe(!1)});it("should correctly test for keys that are present on Object.prototype",function(){expect(equals({},{hasOwnProperty:1})).toBe(!1);expect(equals({},{toString:null})).toBe(!1)});it("should compare regular expressions",function(){expect(equals(/abc/,/abc/)).toBe(!0);
expect(equals(/abc/i,/abc/i)).toBe(!0);expect(equals(/abc/i,/abc/i)).toBe(!0);expect(equals(/abc/i,/abc/)).toBe(!1);expect(equals(/abc/i,/abc/)).toBe(!1);expect(equals(/abc/,/def/)).toBe(!1);expect(equals(/^abc/,/abc/)).toBe(!1);expect(equals(/^abc/,"/^abc/")).toBe(!1);expect(equals(/abc/,new Date)).toBe(!1)});it("should return false when comparing an object and an array",function(){expect(equals({},[])).toBe(!1);expect(equals([],{})).toBe(!1)});it("should return false when comparing an object and a RegExp",
function(){expect(equals({},/abc/)).toBe(!1);expect(equals({},/abc/i)).toBe(!1)});it("should return false when comparing an object and a Date",function(){expect(equals({},new Date)).toBe(!1)});it("should safely compare objects with no prototype parent",function(){var a=extend(Object.create(null),{a:1,b:2,c:3}),b=extend(Object.create(null),{a:1,b:2,c:3});expect(equals(a,b)).toBe(!0);b.c=2;expect(equals(a,b)).toBe(!1)});it("should safely compare objects which shadow Object.prototype.hasOwnProperty",
function(){var a={hasOwnProperty:!0,a:1,b:2,c:3},b={hasOwnProperty:!0,a:1,b:2,c:3};expect(equals(a,b)).toBe(!0);a.hasOwnProperty=function(){};expect(equals(a,b)).toBe(!1)})});describe("csp",function(){var a;beforeEach(function(){a=window.Function});afterEach(function(){window.Function=a;delete csp.isActive_});it("should return the false when CSP is not enabled (the default)",function(){expect(csp()).toBe(!1)});it("should return true if CSP is autodetected via CSP v1.1 securityPolicy.isActive property",
function(){window.Function=function(){throw Error("CSP test");};expect(csp()).toBe(!0)});it("should return the true when CSP is enabled manually via [ng-csp]",function(){spyOn(document,"querySelector").andCallFake(function(a){if("[ng-csp]"==a)return{}});expect(csp()).toBe(!0)});it("should return the true when CSP is enabled manually via [data-ng-csp]",function(){spyOn(document,"querySelector").andCallFake(function(a){if("[data-ng-csp]"==a)return{}});expect(csp()).toBe(!0);expect(document.querySelector).toHaveBeenCalledWith("[data-ng-csp]")})});
describe("jq",function(){var a;beforeEach(function(){a=document.createElement("html")});afterEach(function(){delete jq.name_});it("should return undefined when jq is not set, no jQuery found (the default)",function(){expect(jq()).toBe(void 0)});it("should return empty string when jq is enabled manually via [ng-jq] with empty string",function(){a.setAttribute("ng-jq","");spyOn(document,"querySelector").andCallFake(function(b){if("[ng-jq]"===b)return a});expect(jq()).toBe("")});it("should return empty string when jq is enabled manually via [data-ng-jq] with empty string",
function(){a.setAttribute("data-ng-jq","");spyOn(document,"querySelector").andCallFake(function(b){if("[data-ng-jq]"===b)return a});expect(jq()).toBe("");expect(document.querySelector).toHaveBeenCalledWith("[data-ng-jq]")});it("should return empty string when jq is enabled manually via [x-ng-jq] with empty string",function(){a.setAttribute("x-ng-jq","");spyOn(document,"querySelector").andCallFake(function(b){if("[x-ng-jq]"===b)return a});expect(jq()).toBe("");expect(document.querySelector).toHaveBeenCalledWith("[x-ng-jq]")});
it("should return empty string when jq is enabled manually via [ng:jq] with empty string",function(){a.setAttribute("ng:jq","");spyOn(document,"querySelector").andCallFake(function(b){if("[ng\\:jq]"===b)return a});expect(jq()).toBe("");expect(document.querySelector).toHaveBeenCalledWith("[ng\\:jq]")});it('should return "jQuery" when jq is enabled manually via [ng-jq] with value "jQuery"',function(){a.setAttribute("ng-jq","jQuery");spyOn(document,"querySelector").andCallFake(function(b){if("[ng-jq]"===
b)return a});expect(jq()).toBe("jQuery");expect(document.querySelector).toHaveBeenCalledWith("[ng-jq]")});it('should return "jQuery" when jq is enabled manually via [data-ng-jq] with value "jQuery"',function(){a.setAttribute("data-ng-jq","jQuery");spyOn(document,"querySelector").andCallFake(function(b){if("[data-ng-jq]"===b)return a});expect(jq()).toBe("jQuery");expect(document.querySelector).toHaveBeenCalledWith("[data-ng-jq]")});it('should return "jQuery" when jq is enabled manually via [x-ng-jq] with value "jQuery"',
function(){a.setAttribute("x-ng-jq","jQuery");spyOn(document,"querySelector").andCallFake(function(b){if("[x-ng-jq]"===b)return a});expect(jq()).toBe("jQuery");expect(document.querySelector).toHaveBeenCalledWith("[x-ng-jq]")});it('should return "jQuery" when jq is enabled manually via [ng:jq] with value "jQuery"',function(){a.setAttribute("ng:jq","jQuery");spyOn(document,"querySelector").andCallFake(function(b){if("[ng\\:jq]"===b)return a});expect(jq()).toBe("jQuery");expect(document.querySelector).toHaveBeenCalledWith("[ng\\:jq]")})});
describe("parseKeyValue",function(){it("should parse a string into key-value pairs",function(){expect(parseKeyValue("")).toEqual({});expect(parseKeyValue("simple=pair")).toEqual({simple:"pair"});expect(parseKeyValue("first=1&second=2")).toEqual({first:"1",second:"2"});expect(parseKeyValue("escaped%20key=escaped%20value")).toEqual({"escaped key":"escaped value"});expect(parseKeyValue("emptyKey=")).toEqual({emptyKey:""});expect(parseKeyValue("flag1&key=value&flag2")).toEqual({flag1:!0,key:"value",flag2:!0})});
it("should ignore key values that are not valid URI components",function(){expect(function(){parseKeyValue("%")}).not.toThrow();expect(parseKeyValue("%")).toEqual({});expect(parseKeyValue("invalid=%")).toEqual({invalid:void 0});expect(parseKeyValue("invalid=%&valid=good")).toEqual({invalid:void 0,valid:"good"})});it("should parse a string into key-value pairs with duplicates grouped in an array",function(){expect(parseKeyValue("")).toEqual({});expect(parseKeyValue("duplicate=pair")).toEqual({duplicate:"pair"});
expect(parseKeyValue("first=1&first=2")).toEqual({first:["1","2"]});expect(parseKeyValue("escaped%20key=escaped%20value&&escaped%20key=escaped%20value2")).toEqual({"escaped key":["escaped value","escaped value2"]});expect(parseKeyValue("flag1&key=value&flag1")).toEqual({flag1:[!0,!0],key:"value"});expect(parseKeyValue("flag1&flag1=value&flag1=value2&flag1")).toEqual({flag1:[!0,"value","value2",!0]})});it("should ignore properties higher in the prototype chain",function(){expect(parseKeyValue("toString=123")).toEqual({toString:"123"})})});
describe("toKeyValue",function(){it("should serialize key-value pairs into string",function(){expect(toKeyValue({})).toEqual("");expect(toKeyValue({simple:"pair"})).toEqual("simple=pair");expect(toKeyValue({first:"1",second:"2"})).toEqual("first=1&second=2");expect(toKeyValue({"escaped key":"escaped value"})).toEqual("escaped%20key=escaped%20value");expect(toKeyValue({emptyKey:""})).toEqual("emptyKey=")});it("should serialize true values into flags",function(){expect(toKeyValue({flag1:!0,key:"value",
flag2:!0})).toEqual("flag1&key=value&flag2")});it("should serialize duplicates into duplicate param strings",function(){expect(toKeyValue({key:[323,"value",!0]})).toEqual("key=323&key=value&key");expect(toKeyValue({key:[323,"value",!0,1234]})).toEqual("key=323&key=value&key&key=1234")})});describe("forEach",function(){it("should iterate over *own* object properties",function(){function a(){this.bar="barVal";this.baz="bazVal"}a.prototype.foo="fooVal";var b=new a,c=[];forEach(b,function(a,b){c.push(b+
":"+a)});expect(c).toEqual(["bar:barVal","baz:bazVal"])});it("should not break if obj is an array we override hasOwnProperty",function(){var a=[1,2];a.hasOwnProperty=null;var b=[];forEach(a,function(a,d){b.push(d+":"+a)});expect(b).toEqual(["0:1","1:2"])});it("should handle JQLite and jQuery objects like arrays",function(){var a=jqLite("<p><span>s1</span><span>s2</span></p>").find("span"),b=[];forEach(a,function(a,d){b.push(d+":"+a.innerHTML)});expect(b).toEqual(["0:s1","1:s2"])});it("should handle NodeList objects like arrays",
function(){var a=jqLite("<p><span>a</span><span>b</span><span>c</span></p>")[0].childNodes,b=[];forEach(a,function(a,d){b.push(d+":"+a.innerHTML)});expect(b).toEqual(["0:a","1:b","2:c"])});it("should handle HTMLCollection objects like arrays",function(){document.body.innerHTML="<p><a name='x'>a</a><a name='y'>b</a><a name='x'>c</a></p>";var a=document.getElementsByName("x"),b=[];forEach(a,function(a,d){b.push(d+":"+a.innerHTML)});expect(b).toEqual(["0:a","1:c"])});document.querySelectorAll&&it("should handle the result of querySelectorAll in IE8 as it has no hasOwnProperty function",
function(){document.body.innerHTML="<p><a name='x'>a</a><a name='y'>b</a><a name='x'>c</a></p>";var a=document.querySelectorAll('[name="x"]'),b=[];forEach(a,function(a,d){b.push(d+":"+a.innerHTML)});expect(b).toEqual(["0:a","1:c"])});it("should handle arguments objects like arrays",function(){var a,b=[];(function(){a=arguments})("a","b","c");forEach(a,function(a,d){b.push(d+":"+a)});expect(b).toEqual(["0:a","1:b","2:c"])});it("should handle string values like arrays",function(){var a=[];forEach("bar",
function(b,c){a.push(c+":"+b)});expect(a).toEqual(["0:b","1:a","2:r"])});it("should handle objects with length property as objects",function(){var a=[];forEach({foo:"bar",length:2},function(b,c){a.push(c+":"+b)});expect(a).toEqual(["foo:bar","length:2"])});it("should handle objects of custom types with length property as objects",function(){var a=new function(){this.length=2;this.foo="bar"},b=[];forEach(a,function(a,d){b.push(d+":"+a)});expect(b).toEqual(["length:2","foo:bar"])});it("should not invoke the iterator for indexed properties which are not present in the collection",
function(){var a=[],b=[];b[5]="SPARSE";forEach(b,function(b,d){a.push(b+d)});expect(a.length).toBe(1);expect(a[0]).toBe("SPARSE5")});it("should safely iterate through objects with no prototype parent",function(){var a=extend(Object.create(null),{a:1,b:2,c:3}),b=[],c={};forEach(a,function(d,f,g){expect(this).toBe(c);expect(g).toBe(a);b.push(f+"="+d)},c);expect(b.length).toBe(3);expect(b).toEqual(["a=1","b=2","c=3"])});it("should safely iterate through objects which shadow Object.prototype.hasOwnProperty",
function(){var a={hasOwnProperty:!0,a:1,b:2,c:3},b=[],c={};forEach(a,function(d,f,g){expect(this).toBe(c);expect(g).toBe(a);b.push(f+"="+d)},c);expect(b.length).toBe(4);expect(b).toEqual(["hasOwnProperty=true","a=1","b=2","c=3"])});describe("ES spec api compliance",function(){function a(a,c){var d={};forEach(c,function(f,g,e){expect(e).toBe(c);expect(e[g]).toBe(f);expect(this).toBe(d);a--},d);expect(a).toBe(0)}it("should follow the ES spec when called with array",function(){a(2,[1,2])});it("should follow the ES spec when called with arguments",
function(){a(2,function(){return arguments}(1,2))});it("should follow the ES spec when called with string",function(){a(2,"12")});it("should follow the ES spec when called with jQuery/jqLite",function(){a(2,jqLite("<span>a</span><span>b</span>"))});it("should follow the ES spec when called with childNodes NodeList",function(){a(2,jqLite("<p><span>a</span><span>b</span></p>")[0].childNodes)});it("should follow the ES spec when called with getElementsByTagName HTMLCollection",function(){a(2,jqLite("<p><span>a</span><span>b</span></p>")[0].getElementsByTagName("*"))});
it("should follow the ES spec when called with querySelectorAll HTMLCollection",function(){a(2,jqLite("<p><span>a</span><span>b</span></p>")[0].querySelectorAll("*"))});it("should follow the ES spec when called with JSON",function(){a(2,{a:1,b:2})});it("should follow the ES spec when called with function",function(){function b(){}b.a=1;b.b=2;a(2,b)})})});describe("encodeUriSegment",function(){it("should correctly encode uri segment and not encode chars defined as pchar set in rfc3986",function(){expect(encodeUriSegment("asdf1234asdf")).toEqual("asdf1234asdf");
expect(encodeUriSegment("-_.!~*'(); -_.!~*'();")).toEqual("-_.!~*'();%20-_.!~*'();");expect(encodeUriSegment(":@&=+$, :@&=+$,")).toEqual(":@&=+$,%20:@&=+$,");expect(encodeUriSegment("/; /;")).toEqual("%2F;%20%2F;")})});describe("encodeUriQuery",function(){it("should correctly encode uri query and not encode chars defined as pchar set in rfc3986",function(){expect(encodeUriQuery("asdf1234asdf")).toEqual("asdf1234asdf");expect(encodeUriQuery("-_.!~*'() -_.!~*'()")).toEqual("-_.!~*'()+-_.!~*'()");expect(encodeUriQuery(":@$, :@$,")).toEqual(":@$,+:@$,");
expect(encodeUriQuery("&;=+# &;=+#")).toEqual("%26;%3D%2B%23+%26;%3D%2B%23");expect(encodeUriQuery("  ")).toEqual("++");expect(encodeUriQuery("  ",!0)).toEqual("%20%20");expect(encodeUriQuery("null",!0)).toEqual("null");expect(encodeUriQuery("null")).toEqual("null")})});describe("angularInit",function(){var a,b;beforeEach(function(){b={hasAttribute:function(a){return!!b[a]},querySelector:function(a){return b.querySelector[a]||null},getAttribute:function(a){return b[a]}};a=jasmine.createSpy("bootstrapSpy")});
it("should do nothing when not found",function(){angularInit(b,a);expect(a).not.toHaveBeenCalled()});it("should look for ngApp directive as attr",function(){var c=jqLite('<div ng-app="ABC"></div>')[0];b.querySelector["[ng-app]"]=c;angularInit(b,a);expect(a).toHaveBeenCalledOnceWith(c,["ABC"],jasmine.any(Object))});it("should look for ngApp directive using querySelectorAll",function(){var c=jqLite('<div x-ng-app="ABC"></div>')[0];b.querySelector["[x-ng-app]"]=c;angularInit(b,a);expect(a).toHaveBeenCalledOnceWith(c,
["ABC"],jasmine.any(Object))});it("should bootstrap anonymously",function(){var c=jqLite("<div x-ng-app></div>")[0];b.querySelector["[x-ng-app]"]=c;angularInit(b,a);expect(a).toHaveBeenCalledOnceWith(c,[],jasmine.any(Object))});it("should bootstrap if the annotation is on the root element",function(){var b=jqLite('<div ng-app=""></div>')[0];angularInit(b,a);expect(a).toHaveBeenCalledOnceWith(b,[],jasmine.any(Object))});it("should complain if app module cannot be found",function(){var a=jqLite('<div ng-app="doesntexist"></div>')[0];
expect(function(){angularInit(a,angular.bootstrap)}).toThrowMatching(/\[\$injector:modulerr] Failed to instantiate module doesntexist due to:\n.*\[\$injector:nomod] Module 'doesntexist' is not available! You either misspelled the module name or forgot to load it\./)});it("should complain if an element has already been bootstrapped",function(){var a=jqLite("<div>bootstrap me!</div>");angular.bootstrap(a);expect(function(){angular.bootstrap(a)}).toThrowMatching(/\[ng:btstrpd\] App Already Bootstrapped with this Element '&lt;div class="?ng\-scope"?( ng[0-9]+="?[0-9]+"?)?&gt;'/i);
dealoc(a)});it("should complain if manually bootstrapping a document whose <html> element has already been bootstrapped",function(){angular.bootstrap(document.getElementsByTagName("html")[0]);expect(function(){angular.bootstrap(document)}).toThrowMatching(/\[ng:btstrpd\] App Already Bootstrapped with this Element 'document'/i);dealoc(document)});it("should bootstrap in strict mode when ng-strict-di attribute is specified",function(){function b(a){}a=spyOn(angular,"bootstrap").andCallThrough();var d=
jqLite('<div ng-app="" ng-strict-di></div>');angularInit(jqLite("<div></div>").append(d[0])[0],a);expect(a).toHaveBeenCalledOnce();expect(a.mostRecentCall.args[2].strictDi).toBe(!0);var f=d.injector();expect(function(){f.instantiate(b)}).toThrowMinErr("$injector","strictdi");dealoc(d)})});describe("angular service",function(){it("should override services",function(){module(function(a){a.value("fake","old");a.value("fake","new")});inject(function(a){expect(a).toEqual("new")})});it("should inject dependencies specified by $inject and ignore function argument name",
function(){expect(angular.injector([function(a){a.factory("svc1",function(){return"svc1"});a.factory("svc2",["svc1",function(a){return"svc2-"+a}])}]).get("svc2")).toEqual("svc2-svc1")})});describe("isDate",function(){it("should return true for Date object",function(){expect(isDate(new Date)).toBe(!0)});it("should return false for non Date objects",function(){expect(isDate([])).toBe(!1);expect(isDate("")).toBe(!1);expect(isDate(23)).toBe(!1);expect(isDate({})).toBe(!1)})});describe("isRegExp",function(){it("should return true for RegExp object",
function(){expect(isRegExp(/^foobar$/)).toBe(!0);expect(isRegExp(/^foobar$\//)).toBe(!0)});it("should return false for non RegExp objects",function(){expect(isRegExp([])).toBe(!1);expect(isRegExp("")).toBe(!1);expect(isRegExp(23)).toBe(!1);expect(isRegExp({})).toBe(!1);expect(isRegExp(new Date)).toBe(!1)})});describe("isWindow",function(){it("should return true for the Window object",function(){expect(isWindow(window)).toBe(!0)});it("should return false for any object that is not a Window",function(){expect(isWindow([])).toBe(!1);
expect(isWindow("")).toBeFalsy();expect(isWindow(23)).toBe(!1);expect(isWindow({})).toBe(!1);expect(isWindow(new Date)).toBe(!1);expect(isWindow(document)).toBe(!1)})});describe("compile",function(){it("should link to existing node and create scope",inject(function(a,b){var c=angular.element('<div>{{greeting = "hello world"}}</div>');e=b(c)(a);a.$digest();expect(c.text()).toEqual("hello world");expect(a.greeting).toEqual("hello world")}));it("should link to existing node and given scope",inject(function(a,
b){var c=angular.element('<div>{{greeting = "hello world"}}</div>');e=b(c)(a);a.$digest();expect(c.text()).toEqual("hello world")}));it("should link to new node and given scope",inject(function(a,b){var c=jqLite('<div>{{greeting = "hello world"}}</div>'),d=b(c),f=c.clone();e=d(a,function(a){f=a});a.$digest();expect(c.text()).toEqual('{{greeting = "hello world"}}');expect(e.text()).toEqual("hello world");expect(e).toEqual(f);expect(a.greeting).toEqual("hello world")}));it("should link to cloned node and create scope",
inject(function(a,b){var c=jqLite('<div>{{greeting = "hello world"}}</div>');e=b(c)(a,noop);a.$digest();expect(c.text()).toEqual('{{greeting = "hello world"}}');expect(e.text()).toEqual("hello world");expect(a.greeting).toEqual("hello world")}))});describe("nodeName_",function(){it('should correctly detect node name with "namespace" when xmlns is defined',function(){var a=jqLite('<div xmlns:ngtest="http://angularjs.org/"><ngtest:foo ngtest:attr="bar"></ngtest:foo></div>')[0];expect(nodeName_(a.childNodes[0])).toBe("ngtest:foo");
expect(a.childNodes[0].getAttribute("ngtest:attr")).toBe("bar")});it('should correctly detect node name with "namespace" when xmlns is NOT defined',function(){var a=jqLite('<div xmlns:ngtest="http://angularjs.org/"><ngtest:foo ngtest:attr="bar"></ng-test></div>')[0];expect(nodeName_(a.childNodes[0])).toBe("ngtest:foo");expect(a.childNodes[0].getAttribute("ngtest:attr")).toBe("bar")});it("should return undefined for elements without the .nodeName property",function(){expect(nodeName_({})).toBeUndefined()})});
describe("nextUid()",function(){it("should return new id per call",function(){for(var a={},b=100;b--;){var c=nextUid();expect(typeof c).toBe("number");expect(a[c]).toBeFalsy();a[c]=!0}})});describe("version",function(){it("version should have full/major/minor/dot/codeName properties",function(){expect(version).toBeDefined();expect(version.full).toBe('"NG_VERSION_FULL"');expect(version.major).toBe("NG_VERSION_MAJOR");expect(version.minor).toBe("NG_VERSION_MINOR");expect(version.dot).toBe("NG_VERSION_DOT");
expect(version.codeName).toBe('"NG_VERSION_CODENAME"')})});describe("bootstrap",function(){it("should bootstrap app",function(){var a=jqLite("<div>{{1+2}}</div>"),b=angular.bootstrap(a);expect(b).toBeDefined();expect(a.injector()).toBe(b);dealoc(a)});it("should complain if app module can't be found",function(){var a=jqLite("<div>{{1+2}}</div>");expect(function(){angular.bootstrap(a,["doesntexist"])}).toThrowMatching(/\[\$injector:modulerr\] Failed to instantiate module doesntexist due to:\n.*\[\$injector:nomod\] Module 'doesntexist' is not available! You either misspelled the module name or forgot to load it\./);
expect(a.html()).toBe("{{1+2}}");dealoc(a)});describe("deferred bootstrap",function(){var a=window.name,b;beforeEach(function(){window.name="";b=jqLite("<div>{{1+2}}</div>")});afterEach(function(){dealoc(b);window.name=a});it("should provide injector for deferred bootstrap",function(){var a;window.name="NG_DEFER_BOOTSTRAP!";a=angular.bootstrap(b);expect(a).toBeUndefined();a=angular.resumeBootstrap();expect(a).toBeDefined()});it("should resume deferred bootstrap, if defined",function(){window.name=
"NG_DEFER_BOOTSTRAP!";angular.resumeDeferredBootstrap=noop;var a=spyOn(angular,"resumeDeferredBootstrap");angular.bootstrap(b);expect(a).toHaveBeenCalled()});it("should wait for extra modules",function(){window.name="NG_DEFER_BOOTSTRAP!";angular.bootstrap(b);expect(b.html()).toBe("{{1+2}}");angular.resumeBootstrap();expect(b.html()).toBe("3");expect(window.name).toEqual("")});it("should load extra modules",function(){b=jqLite("<div>{{1+2}}</div>");window.name="NG_DEFER_BOOTSTRAP!";var a=jasmine.createSpy("bootstrapping");
angular.bootstrap(b,[a]);expect(a).not.toHaveBeenCalled();expect(b.injector()).toBeUndefined();angular.module("addedModule",[]).value("foo","bar");angular.resumeBootstrap(["addedModule"]);expect(a).toHaveBeenCalledOnce();expect(b.injector().get("foo")).toEqual("bar")});it("should not defer bootstrap without window.name cue",function(){angular.bootstrap(b,[]);angular.module("addedModule",[]).value("foo","bar");expect(function(){b.injector().get("foo")}).toThrowMinErr("$injector","unpr","Unknown provider: fooProvider <- foo");
expect(b.injector().get("$http")).toBeDefined()});it("should restore the original window.name after bootstrap",function(){window.name="NG_DEFER_BOOTSTRAP!my custom name";angular.bootstrap(b);expect(b.html()).toBe("{{1+2}}");angular.resumeBootstrap();expect(b.html()).toBe("3");expect(window.name).toEqual("my custom name")})})});describe("startingElementHtml",function(){it("should show starting element tag only",function(){expect(startingTag('<ng-abc x="2A"><div>text</div></ng-abc>')).toBe('<ng-abc x="2A">')})});
describe("startingTag",function(){it("should allow passing in Nodes instead of Elements",function(){var a=document.createTextNode("some text");expect(startingTag(a)).toBe("some text")})});describe("snake_case",function(){it("should convert to snake_case",function(){expect(snake_case("ABC")).toEqual("a_b_c");expect(snake_case("alanBobCharles")).toEqual("alan_bob_charles")});it("should allow separator to be overridden",function(){expect(snake_case("ABC","&")).toEqual("a&b&c");expect(snake_case("alanBobCharles",
"&")).toEqual("alan&bob&charles")})});describe("fromJson",function(){it("should delegate to JSON.parse",function(){var a=spyOn(JSON,"parse").andCallThrough();expect(fromJson("{}")).toEqual({});expect(a).toHaveBeenCalled()})});describe("toJson",function(){it("should delegate to JSON.stringify",function(){var a=spyOn(JSON,"stringify").andCallThrough();expect(toJson({})).toEqual("{}");expect(a).toHaveBeenCalled()});it("should format objects pretty",function(){expect(toJson({a:1,b:2},!0)).toBe('{\n  "a": 1,\n  "b": 2\n}');
expect(toJson({a:{b:2}},!0)).toBe('{\n  "a": {\n    "b": 2\n  }\n}');expect(toJson({a:1,b:2},!1)).toBe('{"a":1,"b":2}');expect(toJson({a:1,b:2},0)).toBe('{"a":1,"b":2}');expect(toJson({a:1,b:2},1)).toBe('{\n "a": 1,\n "b": 2\n}');expect(toJson({a:1,b:2},{})).toBe('{\n  "a": 1,\n  "b": 2\n}')});it("should not serialize properties starting with $$",function(){expect(toJson({$$some:"value"},!1)).toEqual("{}")});it("should serialize properties starting with $",function(){expect(toJson({$few:"v"},!1)).toEqual('{"$few":"v"}')});
it("should not serialize $window object",function(){expect(toJson(window)).toEqual('"$WINDOW"')});it("should not serialize $document object",function(){expect(toJson(document)).toEqual('"$DOCUMENT"')});it("should not serialize scope instances",inject(function(a){expect(toJson({key:a})).toEqual('{"key":"$SCOPE"}')}));it("should serialize undefined as undefined",function(){expect(toJson(void 0)).toEqual(void 0)})});describe("isElement",function(){it("should return a boolean value",inject(function(a,
b,c){a=a("<p>Hello, world!</p>")(c);b=b.find("body")[0];var d=[!1,!1,!1,!1,!1,!1,!1,!0,!0];angular.forEach([null,void 0,"string",1001,{},0,!1,b,a],function(a,b){var c=angular.isElement(a);expect(typeof c).toEqual("boolean");expect(c).toEqual(d[b])})}));it("should return false for objects resembling a Backbone Collection",function(){expect(isElement({children:[{},{},{}],find:function(){},on:function(){},off:function(){},bind:function(){}})).toBe(!1)});it("should return false for arrays with node-like properties",
function(){var a=[1,2,3];a.on=!0;expect(isElement(a)).toBe(!1)})})});
